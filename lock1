-- Create a temporary table for wait type descriptions
CREATE TABLE #WaitTypeDescriptions (
    wait_type VARCHAR(60) PRIMARY KEY,
    description VARCHAR(255)
);

-- Insert common wait types and their descriptions
INSERT INTO #WaitTypeDescriptions (wait_type, description)
VALUES
    -- [Include all wait types as before]
    ('LCK_M_S', 'Waiting to acquire a shared lock'),
    ('LCK_M_U', 'Waiting to acquire an update lock'),
    ('LCK_M_X', 'Waiting to acquire an exclusive lock'),
    -- [Add other wait types]
    ('OTHER', 'Other wait types');

WITH cte_blocking_sessions AS (
    -- Anchor member: sessions that are blocking others but are not themselves blocked
    SELECT 
        bs.session_id,
        CAST(0 AS SMALLINT) AS blocking_session_id,
        bs.sql_handle,
        0 AS execution_level,
        bs.session_id AS ordering,
        bs.wait_type,
        bs.wait_time,
        bs.wait_resource
    FROM 
        (
            -- Sessions that are blocking others but are not themselves blocked
            SELECT 
                s.session_id,
                ISNULL(r.sql_handle, c.most_recent_sql_handle) AS sql_handle,
                r.wait_type,
                r.wait_time,
                r.wait_resource
            FROM 
                sys.dm_exec_sessions s
            LEFT JOIN 
                sys.dm_exec_requests r ON s.session_id = r.session_id
            LEFT JOIN 
                sys.dm_exec_connections c ON s.session_id = c.session_id
            WHERE 
                s.is_user_process = 1
                AND s.session_id IN (
                    SELECT blocking_session_id
                    FROM sys.dm_exec_requests
                    WHERE blocking_session_id <> 0
                )
                AND s.session_id NOT IN (
                    SELECT session_id
                    FROM sys.dm_exec_requests
                    WHERE blocking_session_id <> 0
                )
        ) bs

    UNION ALL

    -- Recursive member: sessions that are blocked by others
    SELECT 
        br.session_id,
        br.blocking_session_id,
        br.sql_handle,
        cte.execution_level + 1,
        cte.ordering,
        br.wait_type,
        br.wait_time,
        br.wait_resource
    FROM 
        sys.dm_exec_requests br
    INNER JOIN 
        cte_blocking_sessions cte ON br.blocking_session_id = cte.session_id
)
SELECT DISTINCT 
    -- Indentation to represent the blocking hierarchy
    REPLICATE(' ', cte.execution_level * 4) + '|-' + CAST(cte.session_id AS VARCHAR(5)) AS session_id,
    txt.text AS sql_text,
    cte.blocking_session_id,
    cte.execution_level,
    cte.ordering,
    cte.wait_type,
    -- Include wait type description
    ISNULL(wtd.description, 'Unknown wait type') AS wait_type_description,
    -- Format wait_time in hh:mm:ss
    RIGHT('0' + CAST(cte.wait_time / 1000 / 3600 AS VARCHAR), 2) + ':' +
    RIGHT('0' + CAST((cte.wait_time / 1000 / 60) % 60 AS VARCHAR), 2) + ':' +
    RIGHT('0' + CAST((cte.wait_time / 1000) % 60 AS VARCHAR), 2) AS wait_time_formatted,
    cte.wait_resource,
    -- Resource description based on wait_resource
    rd.resource_description,
    -- Object details
    od.database_name,
    od.schema_name,
    od.object_name,
    od.index_name,
    ses.login_name,
    ses.status,
    ses.host_name,
    ses.program_name,
    ses.last_request_start_time,
    ses.last_request_end_time,
    req.command,
    -- Map transaction_isolation_level to names
    CASE req.transaction_isolation_level
        WHEN 0 THEN 'Unspecified'
        WHEN 1 THEN 'Read Uncommitted'
        WHEN 2 THEN 'Read Committed'
        WHEN 3 THEN 'Repeatable Read'
        WHEN 4 THEN 'Serializable'
        WHEN 5 THEN 'Snapshot'
        ELSE 'Unknown'
    END AS transaction_isolation_level_desc
FROM 
    cte_blocking_sessions cte
LEFT JOIN
    sys.dm_exec_sessions ses ON cte.session_id = ses.session_id
LEFT JOIN
    sys.dm_exec_requests req ON cte.session_id = req.session_id
CROSS APPLY 
    sys.dm_exec_sql_text(cte.sql_handle) AS txt
LEFT JOIN
    #WaitTypeDescriptions wtd ON cte.wait_type = wtd.wait_type
-- Use CROSS APPLY to parse wait_resource and extract IDs
CROSS APPLY (
    SELECT 
        CASE 
            WHEN cte.wait_resource LIKE 'KEY: %' THEN 'KEY'
            WHEN cte.wait_resource LIKE 'PAGE: %' THEN 'PAGE'
            WHEN cte.wait_resource LIKE 'RID: %' THEN 'RID'
            WHEN cte.wait_resource LIKE 'OBJECT: %' THEN 'OBJECT'
            ELSE NULL
        END AS resource_type,
        -- Extract identifiers based on resource type
        CASE 
            WHEN cte.wait_resource LIKE 'KEY: %' THEN
                PARSENAME(REPLACE(SUBSTRING(cte.wait_resource, 6, CHARINDEX('(', cte.wait_resource) - 7), ':', '.'), 2)
        END AS hobt_id,
        CASE 
            WHEN cte.wait_resource LIKE 'KEY: %' THEN
                PARSENAME(REPLACE(SUBSTRING(cte.wait_resource, 6, CHARINDEX('(', cte.wait_resource) - 7), ':', '.'), 1)
        WHEN cte.wait_resource LIKE 'PAGE: %' OR cte.wait_resource LIKE 'RID: %' OR cte.wait_resource LIKE 'OBJECT: %' THEN
                PARSENAME(REPLACE(SUBSTRING(cte.wait_resource, CHARINDEX(':', cte.wait_resource) + 1, LEN(cte.wait_resource)), ':', '.'), 3)
        END AS dbid,
        CASE 
            WHEN cte.wait_resource LIKE 'PAGE: %' OR cte.wait_resource LIKE 'RID: %' THEN
                PARSENAME(REPLACE(cte.wait_resource, ':', '.'), 2)
        END AS fileid,
        CASE 
            WHEN cte.wait_resource LIKE 'PAGE: %' OR cte.wait_resource LIKE 'RID: %' THEN
                PARSENAME(REPLACE(cte.wait_resource, ':', '.'), 1)
        END AS pageid,
        CASE 
            WHEN cte.wait_resource LIKE 'RID: %' THEN
                PARSENAME(REPLACE(cte.wait_resource, ':', '.'), 0)
        END AS slotid,
        CASE 
            WHEN cte.wait_resource LIKE 'OBJECT: %' THEN
                PARSENAME(REPLACE(cte.wait_resource, ':', '.'), 1)
        END AS objectid,
        cte.wait_resource AS resource_description
) rd
-- Get object details based on extracted IDs
OUTER APPLY (
    SELECT TOP 1
        DB_NAME(CONVERT(int, rd.dbid)) AS database_name,
        SCHEMA_NAME(o.schema_id) AS schema_name,
        o.name AS object_name,
        i.name AS index_name
    FROM 
        sys.objects o
    LEFT JOIN 
        sys.indexes i ON o.object_id = i.object_id
    WHERE 
        o.object_id = 
            CASE 
                WHEN rd.resource_type = 'KEY' THEN
                    (SELECT object_id FROM sys.partitions WHERE hobt_id = CONVERT(bigint, rd.hobt_id))
                WHEN rd.resource_type = 'OBJECT' THEN CONVERT(int, rd.objectid)
                WHEN rd.resource_type = 'PAGE' OR rd.resource_type = 'RID' THEN
                    (SELECT object_id FROM sys.allocation_units au
                     INNER JOIN sys.partitions p ON au.container_id = p.hobt_id
                     WHERE au.allocation_unit_id = 
                        (SELECT allocation_unit_id FROM sys.fn_PhysLocCracker(
                            CONVERT(binary(8), (
                                SELECT CONVERT(binary(4), CONVERT(int, rd.fileid)) +
                                       CONVERT(binary(4), CONVERT(int, rd.pageid))
                            ))
                        )))
            END
) od
ORDER BY 
    cte.ordering, cte.execution_level;

-- Drop the temporary table after use
DROP TABLE #WaitTypeDescriptions;
