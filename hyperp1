import pywt  # make sure PyWavelets is installed

def _next_observation(self) -> np.ndarray:
    # (A) Ensure we don't go out of bounds.
    if self.current_step >= len(self.df):
        self.current_step = len(self.df) - 1

    # (B) Get the row/data at the current step.
    current_data = self.df.iloc[self.current_step]

    # (C) Extract the technical feature array from the current row.
    features = current_data[self.feature_names].values  # shape = (num_features,)
    obs = list(features)  # start with the standard features

    # *** Wavelet Transformation for Additional Features ***
    # Define a fixed window size (e.g., 32) for the 'Close_unscaled' series.
    window_size = 32
    if self.current_step < window_size:
        # Not enough data: pad the beginning with the first available value.
        prices = self.df['Close_unscaled'].iloc[:self.current_step].values
        padded_prices = np.pad(prices, (window_size - len(prices), 0), mode='edge')
    else:
        padded_prices = self.df['Close_unscaled'].iloc[self.current_step - window_size:self.current_step].values

    # Perform discrete wavelet decomposition using Daubechies 1 (db1) up to level 2.
    coeffs = pywt.wavedec(padded_prices, 'db1', level=2)
    # coeffs is a list: [cA2, cD2, cD1]
    # For each set of coefficients, compute summary statistics (e.g., mean and standard deviation).
    wavelet_features = []
    for c in coeffs:
        wavelet_features.append(np.mean(c))
        wavelet_features.append(np.std(c))
    # Append the wavelet features to the observation vector.
    obs.extend(wavelet_features)
    # (Now, if using level=2 with 'db1', you'll be adding 3*2 = 6 extra features.)

    # (D) Append scaled account features: balance, net worth, and position.
    obs.append(self.balance / self.initial_balance)
    obs.append(self.net_worth / self.initial_balance)
    obs.append(self.position / self.initial_balance)

    # (E) Append one-hot encoded market phase information.
    try:
        adx = float(current_data['ADX_unscaled'])
    except KeyError:
        self.training_logger.error(f"[Env {self.env_rank}] 'ADX_unscaled' not found at step {self.current_step}. Using 0.0")
        adx = 0.0

    if adx > 25:
        try:
            sma10 = float(current_data['SMA10_unscaled'])
            sma50 = float(current_data['SMA50_unscaled'])
            phase = 'Bull' if sma10 > sma50 else 'Bear'
        except KeyError as e:
            self.training_logger.error(f"[Env {self.env_rank}] Missing SMA columns: {e}. Setting phase=Sideways.")
            phase = 'Sideways'
    else:
        phase = 'Sideways'
    for p in self.market_phase:
        obs.append(1.0 if phase == p else 0.0)

    # (F) Append current drawdown fraction.
    if self.peak > 0:
        current_drawdown_fraction = (self.peak - self.net_worth) / self.peak
    else:
        current_drawdown_fraction = 0.0
    obs.append(current_drawdown_fraction)

    # (G) Append the drawdown buffer.
    meltdown_threshold = self.max_drawdown  # e.g., 0.15
    drawdown_buffer = meltdown_threshold - current_drawdown_fraction
    if drawdown_buffer < 0.0:
        drawdown_buffer = 0.0
    obs.append(drawdown_buffer)

    # (H) Convert observation list to np.array and sanitize.
    obs = np.array(obs, dtype=np.float32)
    if np.isnan(obs).any() or np.isinf(obs).any():
        obs = np.nan_to_num(obs, nan=0.0, posinf=0.0, neginf=0.0)

    # (I) Sanity check: Update expected observation space shape accordingly.
    expected_size = self.observation_space.shape[0]
    assert obs.shape[0] == expected_size, f"Observation shape mismatch: got {obs.shape[0]} vs {expected_size}"

    return obs
