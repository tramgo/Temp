# Determine the server name
$serverName = $env:COMPUTERNAME

switch ($serverName) {
    "ServerA" {
        Write-Output "Running script on ServerA"

        try {
            # Step 1: Run UA09 Environment Setup
            $envSetupScript = "D:\Support\SAA_SERVICE\SSSAAEUAPUA09_ENV.bat"
            Write-Output "Executing environment setup: $envSetupScript"
            Start-Process -FilePath $envSetupScript -NoNewWindow -Wait
            if ($LASTEXITCODE -ne 0) {
                throw "Error: SSSAAEUAPUA09_ENV.bat failed with exit code $LASTEXITCODE"
            }

            # Step 2: Update PATH
            Write-Output "Appending directories to PATH"
            $env:PATH += ";D:\Alliance\Access\BSS\bin\win64;D:\Alliance\Access\CRS\bin\win64"

            # Step 3: Stop SAA Service
            $saaStopCommand = "D:\Path\To\saa_system stop"
            Write-Output "Stopping SAA service"
            Start-Process -FilePath $saaStopCommand -NoNewWindow -Wait
            if ($LASTEXITCODE -ne 0) {
                throw "Failed to stop SAA service with exit code $LASTEXITCODE"
            }
            Write-Output "Service SAA stopped successfully."

            # Step 4: Execute Message Completion (OPER1 through OPER8)
            for ($i = 1; $i -le 8; $i++) {
                $args = "-r", "CRIOPER$i", "-c"
                Write-Output "Executing messageTool.exe with arguments: $args"
                Start-Process -FilePath "D:\Alliance\Access\BSS\bin\win64\messageTool.exe" -ArgumentList $args -NoNewWindow -Wait
                if ($LASTEXITCODE -ne 0) {
                    throw "Error: messageTool.exe failed with exit code $LASTEXITCODE"
                }
            }

            # Step 5: Start SAA Service
            $saaStartCommand = "D:\Path\To\saa_system start"
            Write-Output "Starting SAA service"
            Start-Process -FilePath $saaStartCommand -NoNewWindow -Wait
            if ($LASTEXITCODE -ne 0) {
                throw "Failed to start SAA service with exit code $LASTEXITCODE"
            }
            Write-Output "SAA service started successfully."

            # Step 6: Execute Environment Variables Setup for CRNet (setcrsenv.bat)
            $crsEnvSetupScript = "D:\Alliance\Access\CRS\bin\win64\setcrsenv.bat"
            Write-Output "Executing CRNet environment setup: $crsEnvSetupScript"
            Start-Process -FilePath $crsEnvSetupScript -NoNewWindow -Wait
            if ($LASTEXITCODE -ne 0) {
                throw "Error: setcrsenv.bat failed with exit code $LASTEXITCODE"
            }

            # Step 7: Start CRNet Service
            $crnetStartScript = "D:\Path\To\crs_control.bat start"
            Write-Output "Starting CRNet service"
            Start-Process -FilePath $crnetStartScript -NoNewWindow -Wait
            if ($LASTEXITCODE -ne 0) {
                throw "Failed to start CRNet service with exit code $LASTEXITCODE"
            }
            Write-Output "CRNet Service started successfully."

            # Step 8: Execute Queue Release (OPER1 through OPER8)
            for ($i = 1; $i -le 8; $i++) {
                $args = "OPER$i"
                Write-Output "Executing releaseq.exe with arguments: $args"
                Start-Process -FilePath "D:\Path\To\releaseq.exe" -ArgumentList $args -NoNewWindow -Wait
                if ($LASTEXITCODE -ne 0) {
                    throw "Error: releaseq.exe failed with exit code $LASTEXITCODE"
                }
            }

            # Final Success Message
            Write-Output "All operations completed successfully on ServerA."

        } catch {
            # Handle Errors
            Write-Error "An error occurred on ServerA: $_.Exception.Message"
            throw "Script execution aborted on ServerA due to failure."
        }
    }

    "ServerB" {
        Write-Output "Running script on ServerB"

        try {
            # Step 1: Run UA09 Environment Setup
            $envSetupScript = "D:\Support\SAA_SERVICE\SSSAAEUAPUA09_ENV.bat"
            Write-Output "Executing environment setup: $envSetupScript"
            Start-Process -FilePath $envSetupScript -NoNewWindow -Wait
            if ($LASTEXITCODE -ne 0) {
                throw "Error: SSSAAEUAPUA09_ENV.bat failed with exit code $LASTEXITCODE"
            }

            # Step 2: Update PATH
            Write-Output "Appending directories to PATH"
            $env:PATH += ";D:\Alliance\Access\BSS\bin\win64;D:\Alliance\Access\CRS\bin\win64"

            # Step 3: Stop SAA Service
            $saaStopCommand = "D:\Path\To\saa_system stop"
            Write-Output "Stopping SAA service"
            Start-Process -FilePath $saaStopCommand -NoNewWindow -Wait
            if ($LASTEXITCODE -ne 0) {
                throw "Failed to stop SAA service with exit code $LASTEXITCODE"
            }
            Write-Output "Service SAA stopped successfully."

            # Step 4: Execute Message Completion (GILT1 through GILT3 and EQTY1 through EQTY3)
            for ($i = 1; $i -le 3; $i++) {
                $args = "-r", "GILT$i", "-c"
                Write-Output "Executing messageTool.exe with arguments: $args"
                Start-Process -FilePath "D:\Alliance\Access\BSS\bin\win64\messageTool.exe" -ArgumentList $args -NoNewWindow -Wait
                if ($LASTEXITCODE -ne 0) {
                    throw "Error: messageTool.exe failed with exit code $LASTEXITCODE"
                }
            }

            for ($i = 1; $i -le 3; $i++) {
                $args = "-r", "EQTY$i", "-c"
                Write-Output "Executing messageTool.exe with arguments: $args"
                Start-Process -FilePath "D:\Alliance\Access\BSS\bin\win64\messageTool.exe" -ArgumentList $args -NoNewWindow -Wait
                if ($LASTEXITCODE -ne 0) {
                    throw "Error: messageTool.exe failed with exit code $LASTEXITCODE"
                }
            }

            # Step 5: Start SAA Service
            $saaStartCommand = "D:\Path\To\saa_system start"
            Write-Output "Starting SAA service"
            Start-Process -FilePath $saaStartCommand -NoNewWindow -Wait
            if ($LASTEXITCODE -ne 0) {
                throw "Failed to start SAA service with exit code $LASTEXITCODE"
            }
            Write-Output "SAA service started successfully."

            # Step 6: Execute Environment Variables Setup for CRNet (setcrsenv.bat)
            $crsEnvSetupScript = "D:\Alliance\Access\CRS\bin\win64\setcrsenv.bat"
            Write-Output "Executing CRNet environment setup: $crsEnvSetupScript"
            Start-Process -FilePath $crsEnvSetupScript -NoNewWindow -Wait
            if ($LASTEXITCODE -ne 0) {
                throw "Error: setcrsenv.bat failed with exit code $LASTEXITCODE"
            }

            # Step 7: Start CRNet Service
            $crnetStartScript = "D:\Path\To\crs_control.bat start"
            Write-Output "Starting CRNet service"
            Start-Process -FilePath $crnetStartScript -NoNewWindow -Wait
            if ($LASTEXITCODE -ne 0) {
                throw "Failed to start CRNet service with exit code $LASTEXITCODE"
            }
            Write-Output "CRNet Service started successfully."

            # Step 8: Execute Queue Release (GILT1 through GILT3 and EQTY1 through EQTY3)
            for ($i = 1; $i -le 3; $i++) {
                $args = "GILT$i"
                Write-Output "Executing releaseq.exe with arguments: $args"
                Start-Process -FilePath "D:\Path\To\releaseq.exe" -ArgumentList $args -NoNewWindow -Wait
                if ($LASTEXITCODE -ne 0) {
                    throw "Error: releaseq.exe failed with exit code $LASTEXITCODE"
                }
            }

            for ($i = 1; $i -le 3; $i++) {
                $args = "EQTY$i"
                Write-Output "Executing releaseq.exe with arguments: $args"
                Start-Process -FilePath "D:\Path\To\releaseq.exe" -ArgumentList $args -NoNewWindow -Wait
                if ($LASTEXITCODE -ne 0) {
                    throw "Error: releaseq.exe failed with exit code $LASTEXITCODE"
                }
            }

            # Final Success Message
            Write-Output "All operations completed successfully on ServerB."

        } catch {
            # Handle Errors
            Write-Error "An error occurred on ServerB: $_.Exception.Message"
            throw "Script execution aborted on ServerB due to failure."
        }
    }

    Default {
        Write-Output "Server not recognized. Execution aborted."
        throw "Unrecognized server: $serverName"
    }
}
